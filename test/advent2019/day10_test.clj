(ns advent2019.day10-test
  (:require [clojure.test :refer :all]
            [advent2019.day10 :refer :all]))


(def d10-s1 (parse-map
             [".#..#"
              "....."
              "#####"
              "....#"
              "...##"]))

(def d10-s2 (parse-map
             ["......#.#."
              "#..#.#...."
              "..#######."
              ".#.#.###.."
              ".#..#....."
              "..#....#.#"
              "#..#....#."
              ".##.#..###"
              "##...#..#."
              ".#....####"]))

(def d10-s3 (parse-map
             ["#.#...#.#."
              ".###....#."
              ".#....#..."
              "##.#.#.#.#"
              "....#.#.#."
              ".##..###.#"
              "..#...##.."
              "..##....##"
              "......#..."
              ".####.###."]))

(def d10-s4 (parse-map
             [".#..#..###"
              "####.###.#"
              "....###.#."
              "..###.##.#"
              "##.##.#.#."
              "....###..#"
              "..#.#..#.#"
              "#..#.#.###"
              ".##...##.#"
              ".....#.#.."]))

(def d10-s5 (parse-map
             [".#..##.###...#######"
              "##.############..##."
              ".#.######.########.#"
              ".###.#######.####.#."
              "#####.##.#.##.###.##"
              "..#####..#.#########"
              "####################"
              "#.####....###.#.#.##"
              "##.#################"
              "#####.##.###..####.."
              "..######..##.#######"
              "####.##.####...##..#"
              ".#####..#.######.###"
              "##...#.##########..."
              "#.##########.#######"
              ".####.#.###.###.#.##"
              "....##.##.###..#####"
              ".#.#.###########.###"
              "#.#.#.#####.####.###"
              "###.##.####.##.#..##"]))

(deftest best-location-test
  (testing "Can find best location and max visible count"
    (is (= '([3,4] 8) (best-location d10-s1)))
    (is (= '([5,8] 33) (best-location d10-s2)))
    (is (= '([1,2] 35) (best-location d10-s3)))
    (is (= '([6,3] 41) (best-location d10-s4)))
    (is (= '([11,13] 210) (best-location d10-s5)))))

; (deftest day10-part1-soln-test
;   (testing "Can reproduce the answer for part1"
;     (is (= 3742852857 (first (day10-part1-soln))))))